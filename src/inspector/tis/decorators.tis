

// decorator '@when' - filters event type and establishes chain of event handlers
function @when(func, evtType)
{
  function t(evt)
  {
    var r = false;
    if( evt.type == evtType) 
      r = func.call(this,evt);
    if(t.next) return t.next.call(this,evt) || r;
    return r;  
  }
  // note 'this' in decorators is a current namespace - class or global (ns)
  var principal = typeof this == #class? this : self;
  t.next = principal.onControlEvent; 
  return principal.onControlEvent = t;
}

function @click(func) // short form of @when Event.BUTTON_CLICK ...
{
  function t(evt)
  {
    var r = false;
    if(  evt.type == Event.BUTTON_CLICK
      || evt.type == Event.HYPERLINK_CLICK
      || evt.type == Event.MENU_ITEM_CLICK
      || evt.type == Event.CLICK ) 
      r = func.call(this,evt);
    if(t.next) return t.next.call(this,evt) || r;
    return r;  
  }
  // note 'this' in decorators is a current namespace - class or global (ns)
  var principal = typeof this == #class? this : self;

  t.next = principal.onControlEvent; 
  return principal.onControlEvent = t;
}

function @dblclick(func) 
{
  function t(evt)
  {
    var r = false;
    if( evt.type == Event.MOUSE_DCLICK ) 
      r = func.call(this,evt);
    if(t.next) return t.next.call(this,evt) || r;
    return r;  
  }
  // note 'this' in decorators is a current namespace - class or global (ns)
  var principal = typeof this == #class? this : self;
  t.next = principal.onMouse; 
  return principal.onMouse = t;
}


function @change(func) // short form of @when Event.EDIT_VALUE_CHANGED, etc ...
{
  function t(evt)
  {
    var r = false;
    if(  evt.type == Event.BUTTON_STATE_CHANGED 
      || evt.type == Event.SELECT_SELECTION_CHANGED 
      || evt.type == Event.EDIT_VALUE_CHANGED
      || evt.type == Event.CHANGE ) 
      r = func.call(this,evt);
    if(t.next) return t.next.call(this,evt) || r;
    return r;  
  }
  // note 'this' in decorators is a current namespace - class or global (ns)
  var principal = typeof this == #class? this : self;
  t.next = principal.onControlEvent; 
  return principal.onControlEvent = t;
}

// decorator '@on' - filters evt.target by selector
function @on(func, selector)
{
  return function(evt)
  {
    if(!evt.target) return;
    var el = evt.target.selectParent(selector);
    if( el && el.belongsTo(this))
      return func.call(this,evt,el);
  }
}

// decorator '@key' - filters Event.KEY_DOWN events by keyCode and ctrl, shift, alt flags.
// Establishes chain of event handlers on onKey
function @key(func, keyCode = undefined, modifiers..)
{
  function t(evt)
  {
    var r = false;
    if( evt.type == Event.KEY_DOWN && 
        (keyCode === undefined || (keyCode == evt.keyCode)) ) 
          r = func.call(this,evt);
    if(t.next) return t.next.call(this,evt) || r;
    return r;  
  }
  // note 'this' in decorators is a current namespace - class or global (ns)
  var principal = typeof this == #class ? this : self;
  t.next = principal.onKey; 
  principal.onKey = t;
  //return 
}

// decorator '@CTRL' - pass if evt.ctrlKey === true
function @CTRL(func) { return function(evt) { if( evt.ctrlKey === true ) return func.call(this,evt); } }
// decorator '@NOCTRL' - pass if evt.ctrlKey === false
function @NOCTRL(func) { return function(evt) { if( evt.ctrlKey === false ) return func.call(this,evt); } }
// decorator '@SHIFT' - pass if evt.shiftKey === true
function @SHIFT(func) { return function(evt) { if( evt.shiftKey === true ) return func.call(this,evt); } }
// decorator '@NOSHIFT' - pass if evt.shiftKey === false
function @NOSHIFT(func) { return function(evt) { if( evt.shiftKey === false ) return func.call(this,evt); } }
// decorator '@ALT' - pass if evt.ctrlKey === true
function @ALT(func) { return function(evt) { if( evt.altKey === true ) return func.call(this,evt); } }
// decorator '@NOCTRL' - pass if evt.ctrlKey === false
function @NOALT(func) { return function(evt) { if( evt.altKey === false ) return func.call(this,evt); } }

// decorator '@mouse' - filters mouse events by type, establishes chain of event handlers
function @mouse(func, mouseEvtType)
{
  function t(evt)
  {
    var r = false;
    if( evt.type == mouseEvtType) 
      r = func.call(this,evt);
    if(t.next) return t.next.call(this,evt) || r;
    return r;  
  }
  // note 'this' in decorators is a current namespace - class or global (ns)
  var principal = typeof this == #class? this : self;
  t.next = principal.onMouse; 
  return principal.onMouse = t;
}

// decorator '@focus' - filters focus events by type, establishes chain of event handlers
function @focus(func, got /*true|false*/)
{
  function t(evt)
  {
    var r = false;
    if( evt.type == (got ? Event.GOT_FOCUS : Event.LOST_FOCUS) ) 
      r = func.call(this,evt);
    if(t.next) return t.next.call(this,evt) || r;
    return r;  
  }
  // note 'this' in decorators is a current namespace - class or global (ns)
  var principal = typeof this == #class? this : self;
  t.next = principal.onFocus; 
  return principal.onFocus = t;
}



